# day20

SELECT 질의 결과 사용하기
	
	JDBC에서 select 질의 명령을 던지면 그 결과(InLineTable)을 (==>InlLineTable은 메모리에 저장이 된다.)
	ResultSet이라는 인터페이스가 관리하도록 하고있다.
	 ( ==> new ResiltSet(결과) )
	 
	 우리는 ResiltSet이라는 인터페이스를 이용해서
	  인라인테이블의 결과중에서 필요한 결과를 선택해서 사용할 수 있게된다.
	  
	  이 때
	  	인라인테이블의 결과중 원하는 데이터를 꺼내는 방법은
	  		몇 번째 줄의 몇번째 칸의 데이터를 꺼내라는게 아니고
	  	
	  	현재 작업줄의 몇번째 칸을 꺼내라
	  	라는 방식이다.
	  	(현재 작업줄 : 가상의 레코드 포인터라고 말한다.)
	  		// 처음에는 제목쪽에 커서가 있더라.. 를 꼭 기억해주세요!
	  	
	  주요 함수
	  	1. 가상의 레코드 포인터(현재 작업 위치)를 이동시켜야 한다.
	  		
	  		absolute(int row)
	  			==> 지정한 행으로 이동.
	  		afterLast()
				==> EOF로 이동한다. (End Of File)	  		
	  		beforeFirst()
	  			==> BOF로 이동한다.(Begin Of File)
	  		first()
	  			==> 1번 행으로 이동
	  		last()
	  			==> 마지막행으로 이동
	  		next()			***
	  			==> 현재 작업행의 다음행으로 이동
	  		previous()
	  			==> 현재 작업행의 이전행으로 이동
	  			
	  	주의 ]
	  		afterLast()
	  		beforeFirst()
	  			==> 항상 이동에 성공을 한다.
	  				왜냐하면 BOF, EOF는 InLineTable에 탄생되면
	  				자바가 자동으로 만들어주는 가상의 위치이므로 항상 존재한다.
	  				
	  		이외의 함수들은 이동에 실패할 수 있다.
-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-
	
	  2. 데이터를 꺼내는 함수
	  	
	  	getXXX()
	  	  	==> XXX는 꺼낼 데이터를 사용할 데이터타입 이름( getString ....)
	  	  		==> 실제 데이터베이스에 있는 타입이 아니고
	  	  			그 데이터를 자바에서 사용하고 싶은 타입으로 꺼내면 된다.
	  	  			(즉, 데이터베이스에 있는 형태와 달라도 상관이 없다.)
	  	  		
	  	  		예 ]
	  	  			나이를 꺼내고 싶다
	  	  			나이틑 정수 형태일 것이므로
	  	  				  getInt()
	  	  			로 꺼내와야 한다.
	  	  			
	  	  			급여를 꺼내고 싶다
	  	  			급여는 소숫점이 있는 실수로 꺼내고 싶다.
	  	  				getFolat()
	  	  			로 꺼내면 된다.
	  	  	주의 ]
	  	  		이때 꺼내는 방식
	  	  			
	  	  			1. getXXX(int(칸의 위치));
	  	  				==> 위치로 알려주는 방식
	  	  					자바는 인덱스가 0부터 시작하지만
	  	  				데이터베이스는 인덱스가 1 부터 시작하므로
	  	  				순서대로 1부터 시작하면 된다.
	  	  				
	  	  				예 ]
	  	  					
	  	  					emp테이블의 조회결과 중 이름으 꺼내고 싶다.
	  	  						getString(2);

		2. getXXX(String(필드이름))
			==> 필드이름으로 아렬주는 방식
			
				에 ]
					emp테이블의 조회결과 중 이름을 꺼내고싶다.
						getString("ename")
		
	주의 ]
		
		데이터를 조회할 때 별칭을 줘서 조회하는 경우
			SELECT ename as name FROM
		이런 경우
		필드이름으로 데이터를 꺼낼 경우 필드이름은 별칭을 적어줘야 한다.
		( <== 인라인테이블(가상의 테이블)에서 컬럼의 이름은 별칭으로 만들어지기 때문에..
		
결론 ]
	SELECT 질의 명령을 실행하면
	먼저
		1. 필요한 위치로 레코드포인터를 이동시키고
		2. 필요한 데이터를 하나씩 꺼내야 한다.
-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-

	양방향 이동이 가능한 인라인테이블을 만드는 방법
	
	==>
		Statement가양뱡향 스테이트먼트가 되어야하낟.
		createStatement(int resulSetType, int resultSetConcuwrrency)
		를 이용해서 Statement를 만들어야 양방향 인라인테이블이 만들어질 수 있다
		
			int resultSetType
				ResultSet.TYPE_FORWAWRD_ONLY ( 상수로 정의 되어있음, 인터페이스의 기반..)
				==> 기본값으로 전(앞)방향 인라인테이블을 만들어준다.
				
				ResultSet.TYPE_SCROLL_INSESITIVE
				==> 상대방이 바뀐 결과를 적용받지 않는다.
				
				ResultSet.TYPE_SCROLL_SENSITIVE
				==> 상대방이 바뀐 결과를 적용받는다
				==> 양방향 인라인테이블을 만들어준다.
				
			int resultSetConcurrency
			(상수가 정의 되어 있다.)
				ResultSet.CONCUR_READ_ONLY
				==> JDBC에서 테이블을 수정할 수 없도록 한다.
				
				ResultSet.CONCUR_UPDATABLE
				==> JDBC에서 테이블을 수정하도록 한다.
				
	==> JDBC는 UPDATE, DELETE 질의 명령을 실행하지 않고도 
		직접 데이터를 수정할 수 있는 기능을 가지고 있다.
			
-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-	-

PreparedStatement
	==> 질의 명렬ㅇ을 데이터베이스에게 전달하는 Statement 의 일종이다
	
		Statement의 단점
			
			질의 명령을 실행할 때마다 매번 질의 명령을 데이터베이스에게 전달하는 형식을 취한다.
			그런데 질의 명령의 긴 경우도 있다.
			
			데이터베이스는 네트워크를 이용한다.
			(공용 데이터니까)
			
			**
			문제점을 해결하기 위한 다른 Statement가 생겼는데 그것이 
				PreparedStatement
			이다.
			
			이것은 미리 질의명령을 알려준 후
			실행이 필요하면 실행만 해달라고 요구하면 되는 형식이다.
			따라서 매번 질의명령을 알려줄 필요가 없다.
			
			작업을 하다보면 매번 같은 질의명령을 실행할 필요가 있을 것이다.
			그런데 일반 Statement는 매번 같은 질의명령이라도 다시 보내줘야한다.
			이런 경우 미리 질의명령을 알려주는 전속 Statement를 만들어 놓고
			질의 명령은 보내지 말고 실행만 부탁한다면
			처리속도가 그 만큼 빨라지고 코딩도 편해질 것이다.  
			
	만드는 방법
		
		con.preparedStatement();
		
	참고 ]
		자주 사용하는 질의명령이라도 데이터는 달라질 수 있다.
		이 문제를 해결하는 방법으로
		질의 명령을 만들 때
		변화되는 데이터 부분은 ? 로 대신한다.
		
		? 부분만 질의명령을 실행하기 전에 직접 채워넣고
		질의 명령을 실행하는 방식을 채택했다.
		
		예]
			String sql = " 
							SELECT
								ename, mgr, sal, comm, deptno
							FROM
								emp
							WHERE
								empno = ?
								";
								==> 보내기전에 ?대신 데이터를 채워주면 된다.
								 == > ; 는 적지 않는다. 알아서 처리해준다..
	주요 함수 ]
		?를 채워주는 함수
			
		setXXX(위치, 데이터
		
		XXX는 채울 데이터의 타입에 따라서 선택한다. 
		위치는 ?의 위치를 말한다.
		데이터는 ?에 ?대신 채울 데이터를 말한다.
		
	예]
		위의 질의명령의 경우
			
			setInt(1, 8000);
참고 ]
	ResultSetMetaData
		
		--> 결과에 대한 정보를 관리하는 클래스
		
			예 ]
				결과가 어떤 필드이름으로 나왔는지???
				필드의 형태(number, varchar2,...)는 무엇인지..
				
			생성방법 ]
				
				ResultSet rs = null;
				
				... ... 
				
				ResultsetMetaData meta = rs.getMetaData();
				
								 
			
		



































































































































































































































































































































































































































































































	  	  				
	  	  	
	  	  			
	  	