#JDBC

JDBC
	==> 자바 프로그램을 이용해서 데이터베이스를 컨트롤 할 수 있는 외부 API이다.
		
		배경 ]
			
		데이터베이스는 그 데이터베이스가 가진 DBMS에 의해서 성능이 결정된다.
		즉, 각각의 데이터 베이스마다 질의 명령을 처리하는 방법이 다르다
		==> 데이터베이스마다 그 데이터베이스의 DBMS에 따라서 프로그램방식을 다르게 해야 한다.
		
		해결방법으로 제시된 것이 JAVA안에 DBMS를 만들어 넣고
		개발자는 JAVA의 DBMS에게만 명령을 내리도록 해놓았다.
		개발자는 한 가지 방식으로 처리하도록 해 놓았다. 라는 말과 같다
		JAVA 내부에 있는 DBMS가 실제 데이터베이스와 연결해서 처리하도록 해놓았다.
		
		그래서 이렇게 자바 내부에 만든 DBMS가 JDBC이다.
		하지만
		우리가 JDBC를 배운다는 것은
		우리는 JDBC에게만 명령을 내리면(한가지 방식으로 명령을 내리면..)
		JDBC가 알아서 필요한 데이터베이스의 DBMS에게 명령을 전달하게 된다.
		
	참고 ]
		JDBC와 실제 DBMS를 연결하는 프로그램은
		실제 해당 데이터베이스를 만든 회사에서 제공한다.
---------------------------------------------------------------------------------------------------------------

***
자바 개발자(데이터베이스 처리를 원하는)가 가장 먼저 해야할 일
 1. 사용하려는 데이터베이스와 JDBC를 연결하는 프로그램을 찾아내는 것
 	이 때 이 프로그램을 우리는 "JDBC Driver"라고 부른다.
 	
 2.	찾아낸 외부 API를 Eclipse에 등록해서 Eclipse에서
    외부 API를 사용할 수 있또록 조치를 해야한다.
   	(외부 API 등록하는 방법)
   	1. 프로젝트에서 마우스 오른쪽 버튼을 누르고 맨 하단의 Properties 메뉴를 선택한다.
   	2. 왼쪽 메뉴에서 Java Build Path를 선택한다.
   	3. 가운데 창에서 3번째 탭(Libraries)를 선택한다.
   	4. 오른쪽 버튼중
	   		Add External JARs
       버튼을 클릭해서 다운받은 드라이버를 선택.
       JFBC
       
  
  참고 ]
  	인터페이스로 만들어놓은 이유
  		==> 세션을 관리하는 방법이 각 DBMS마다 다르기 떄문에.
  			접속하는 순간 함수의 기능을 거기 맞도록 조절할 목적으로 ..
  			
  			
  JDBC 프로그래밍
  	  	0. JDBC 드라이버를 구한다.
  	  	1. 드라이버를 로딩한다.
  	  		Class.forName()
  	  	2. 데이터베이스에 접속을 한다.
  	  		connection can = Drivermanager.getconnection();
  	  		
  	  	=================여기까지가 각 데이터 베이스들 마다 달라지는 부분
  	  		      

  	  3. JDBC와 실제 DBMS사이에 명령을 전달 할 수 있는 도구를 만들어야 한다.
  	  (오라클은 서버 데이터베이스이다.
  	  	즉, 프로그램이 동작한느 컴퓨터와 데이터베이스가 있는 컴퓨터를 다를 수 있다.)
  	  	
  	  	사용하는 클래스(인터페이스) Statement 라는 도구가 있다.
  	  	
  	  		만드는 방법
  	  			Statement stmt = con.createStatement();
  	  			// 커넥션에서 명령 전달할 도구를 꺼내오는 것.
  	  			
  	  		참고 ]
  	  			 질의 명령을 실행하는 방법은
  	  			 	(Statement에 질의 명령을 실어서 보내는 방법..)
  	  			 	
  	  			 	1. execute(String sql) // 문자열로 만들어진 질의명령
  	  			 		==> 질의명령을 실행한 후에 JDBC에게 보고하지 않는다.
  	  			 		반환값은 boolean인데
  	  			 		질의명령의 실행여부를 알려주는 것이 아니고 질의 명령의 실행결과가 있는지 여부를 알려준다.
  	  			 		
  	  			 		예 ]
  	  			 			SELECT * FROM emp;	==> true
  	  			 			insert into  ..... ==> (결과값이 없다.. 인라인뷰가 안만들어진다) false
  	  			 		주로 실행여부에 관계없는 명령에 주로 사용함.
  	  			 		
  	  			 		CREATE, INSERT,  ...
  	  			 		 
  	  			 	2. exeuteQuery(String sql) //질의명령 문자열을 실어서 저 함수를 호출해주는 방법
  	  			 		== > 반환값이 ResultSet인데
  	  			 			질의 명령의 실행결과와 탄생하는 인라인 테이블을 관리하는 클래스이다.
							
							100% SELECT 질의명령에 사용된다.
							
  	  			 	3. executeUpdate(String sql) //  
						반환값이 int 인데
						이 반환값의 의미는 질의를 실행한 결과
						변화된 데이터의 갯수를 의미한다.
						
						예 ]
							update나 delete로 추가, 삭제된 행의 수
						
						주로 질의 명령의 실행 결과 여부를 판단할 때 쓰는 명령
						
					주로 update,delete로 ...
			
			아무것이나 사용해도 원칙적으로 가능하다.
		
			반환값의 의미 때문에 선택사용한다.
			
  	  			 	
  	  	
