# day18_01

스트림(Stream)
	==> 자바는 외부장치와 데이터를 주고받는 방법을
		한가지로 통일시켜 놓았다.
		그것이 바로 Stream이다.
		
		쉽게 설명하자면..
			빨대와 같은 개념으로 이해를 하면 된다.
		
		즉, 스트림은 데이터를 주고 받을 외부장치에 꽂기만 하고
		나는 빨기만 하면(같은 함수를 이용하면)
		외부 장치의 데이터가 들어온다.
		라는 개념이다.
		
	참고 ]
		스트림은 단방향이다.
		즉, 하나의 스트림은 한 방향으로만 데이터를 보낼 수 있다.
		만약 같은 외부장치에 데이터를 주기도 하고 받기도 하고자 한다면
		스트림이 두개 필요하다.
		
	스트림의 종류( 구분 : 방향성 )
			1. 프로그램으로 데이터가 들어오는 방향
				InputStream, Reader
			2. 프로그램에서 데이터가 나가는 방향
				OutputStream, Writer
				
	스트림의 종류( 구분 : 데이터의 양 )
			1. byte 단위
				InputStream, OutputStream
				==> 특징 : byte씩 끊어서 전송하기 때문에 속도가 느리다.( but, 기계어도 처리가 가능하다. - ex)바이너리 코드 )
				 	
			2. char 단위
				Reader, writer
				==> 2byte씩 처리하기 때문에 '속도가 조금 빠르다.'
					(오직 문자처리만 가능하다.) 2byte씩 처리하기 때문에 2진수코드가 역전이 될 수 있다. 그 이유로 문자처리만 가능하게 되었다.
					
		참고 ]
			byte가 char로 합쳐지는 순간 운영체제에 따라서 비트순서가 바뀔 수 있다.
			그 때문에 바이너리 코드는 문자단위로 전송하지 않는게 원칙이다. 
			
	스트림의 종류( 구분 : 상대방 종류 )
			1. 타겟스트림 (기본 스트림)
				==> 외부장치에 직접 연결되는 스트림
				
			2. 필터스트림 (보조 스트림)
				==> 스트림의 성능향상, 개발자의 편의 등을 위해서
					스트림에 연결되는 스트림
					
		참고 ]
			반드시 타겟(기본) 스트림은 존재해야 하고
				필요에 따라서 필터(보조) 스트림을 연결해서 사용해야 한다.
------------------------------------------------------------------------------------------------------------------------------------------------
타겟 스트림
1. InputStream
	
	기본 함수 ]
		
		int read()
			==> 오직 한 문자(1byte 단위)만 읽어들이는 함수
				  반환값은 읽은 문자의 갯수를 의미한다.
		
		int read(byte[] b)
			==> 여러 바이트를 읽어들이는 함수이다.
				 읽은 결과는 매개변수로 입력되는 바이트배열에 기억이 된다.
				반환값은 읽은 데이터의 갯수(바이트 수)를 반환해준다.
				
		int read(byte[] b, int off, int len)
			==>	여러 바이트를 읽어들이는 함수이다.
				 다만, 배열의 지정한 위치부터 지정한 갯수만큼만 읽어준다.
				반환값은 읽은 데이터 갯수를 반환해주는데 역시, byte수로 반환해준다.
----------------------------------------------------------------------------------------------------------------------------------------------

2. FileInputStream
	==> 파일에 연결되는 입력용 스트림
	
	생성 방법 ]
		
		FileInputStream(String name)
			==> 스트림을 연결할 파일의 이름을 이용해서 스트림을 연결한다.

3. FileOutputStream
	==> 연결된 파일로 보내는 방향의 스트림.
		
		기본 함수 ]
			
			void write(int b)
			==> 한 글자만 내보내는 함수
			
			void write(byte[] b)
			==> 여러 글자를 내보내는 함수
			
			void write(byte[] b, int off, int len)
			==> 여러 글자중에서 지정한 부분만 내보내는 함수
				int off		:  내보낼 시작 위치
				int len		:  내보낼 데이터 갯수
----------------------------------------------------------------------------------------------------------------------------------------------

File
	==> 이것은 스트림은 아니다. ( 데이터를 입력, 출력하는 기능이 없다.)
		다만 우리가 외부 장치 중에서 가장 많이 사용하는 외부장치가 파일이다보니
		그 파일에 대한 정보를 처리하기 위한 클래스
	
	생성방법 ]
		
		File(String pathname)
			==> 파일의 경로와 이름을 지정해서 만든다.
			
		File(String parent, String child)
			==> 파일의 경로와 이름을 따로 지정해서 만든다.
			
		File(File parent, String child)
			==> 이미 파일이라는 객체가 있다면, 파일의 정보를 이용하고.
				파일의 이름만 다시 지정해서 만드는 방법이다.
		
		File(URI uri)
			==> 네트워크에서 다른 시스템에 있는 파일의 정보를 만든다. 
		
	참고 ]
		자바에서의 파일은 폴더 자체도 파일로 인정한다.
		
		예 ]
			File f = new File("d:\\");
			
	참고 함수 ]
	
		1. 정보를 알아내는 함수
			getName()				-- 파일의 이름만 알아내는 함수
			getParent()				-- 폴더 이름만 알아내는 함수
			exists()				-- 파일의 존재 여부를 알아내는 함수
			length()				-- 파일의 크기를 알아내는 함수
			....
			
		2. 외부적인 작업을 하기위한 함수 
		==> 데이터 입출력 이외에 파일 전체에 대해서 필요한 작업을 할 수 있는 함수들.
			
			delete()			-- 파일 삭제
			mkdir()				-- 폴더 생성 함수 (하나만 만들어준다.)
			mkdirs()			-- 폴더 생성 함수 (계층에 포함된 폴더 모두를 만들어 준다.)
			renameTo()			-- 파일 이름 변경 함수
			list()				-- 폴더에 있는 파일의 목록을 구하는 함수
			...
	참고 ]
		
		반환값이
		String[] list()		-- 이름만 알아낸다.	-- 파일의 이름만 . 문자열로 알려준다.
		File[] listFiles()	-- 정보를 알아낸다. -- 파일이 갖는 사이즈, 위치, 이름, ... 모든 것에 대한 정보를 알아 낼 수 있다.
			==> 일반적인 파일 목록을 알아낸다. 보통 File[] listFiles[]를 사용하는게 유용하다.
			
		String[] list(FilenameFilter filter)
		File[] listFiles(FileFilter filter)
		File[] listFiles(FilenameFilter tilter)
		==>  필터링을 해서 리스트를 구할 수 있다.
			즉, 내가 필요한 파일만 골라서 목록을 만들 수 있다.
	파일 : 외부 장치라고 알면 편하다. 
--------------------------------------------------------------------------------------------------------------------------

보조 스트림(필터스트림)
 ==>
 	1. 기본 스트림에 기능을 추가 한다던지
 	2. 사용자의 편의를 제공하기 위한
 		보조적인 기능을 하는 스트림이다.
 	
 	주의 ]
 		반드시 기본 스트림은 존재해야 하고
 		필터 스트림은 필요에 따라서 연결해서 사용하면 된다.
 	
 	참고 ]
 		필터 스트림역시 방향성을 갖고있다.
 		반드시 같은 뱡향끼리만 연결해야 한다. ( InputStream에 OutputStream을 연결할 수 없다.)
 		
*****
1. BufferedInputStream / BUfferedOutputStream
	==> 사용자 편의 기능은 없고
		대신
		스트림의 성능을 향상시키는 역할을 합니다.
		버퍼에 데이터를 모았다가 한번에 처리하는 기능이 추가된 스트림이다.
		
	*****
	주요함수 ]
		
		flush()
			==> 강제로 버퍼를 비우는 함수 ( 안에 있는 내용(버퍼에 남아있는 내용) 모두 꺼내주는 함수이다. )
		
2. DataInputStream / DataOutputStream
	==> 많이 사용하는 스트림은 아니다.
		역시 기능향상이 없습니다.		
		대신
		보통 스트림은 반드시 byte[] 로만 데이터를 처리한다.
		문자 데이터가 아닌 다른 형태의 데이터는 문제가 발생할 수 있다.
		 ==> 따라서, 자바의 데이터형을 byte[] 로 변환하지 않고
			'직접' 외부장치로 입출력하는 기능을 추가한 것이다. 
		  		
		 잘 사용하지 않는 이유
		 	DataOutput을 이용하는 경우엔 반드시 DataInput으로 받아야만 한다.
		 	순서가 지켜져야 한다.
		 	(<== 저장할 때, int, float으로 저장했다면 ? ---> 받을 때도 int, float의 순서대로 받아야한다. )

3. PrintStream
	==> 필터 계열의 스트림
		사용자의 편의점 + 기능향상을 동시에 만들어 놓은 보조 스트림
		
		기능
			1) 내부적으로 Buffered 스트림을 연결해 놓았다.
			
			2) 사용자 편의를 위해서 자바의 데이터 형태를 그대로 출력하도록 해 놓았다.
			
			3) 파일과 직접 연결하도록 해 놓았다.		 	
		 		(다른 장치와도 연결이 가능하다.)
		 
		 단점 ]
		 	한 쌍을 이루는 입력쪽 스트림이 없다. ( == 출력만 가능한 스트림이다.)
		 		보조스트림인데 왜??....
		 		==> 장치(파일)에 직접 연결한다.
		 			내부적으로 기본스트림을 만들어서 사용한다.
		 			그 때문에 기본스트림을 따로 만들어주지 않아도 되는 스트림이다.
		 			
--------------------------------------------------------------------------------------------------------------------------
byte단위는 끝- -- --- 

char 단위의 스트림
==> 한 번 입출력 할 때 2byte 단위로 입출력할 수 있는 스트림.

	주의 ]
		기계어 상태의 내용은 절대로 char단위로 입출력을 사용하면 안된다.
		이것은 오직 텍스트 문서에 한해서만 사용해야 한다.
			웹에서 우리가 뭔가 문서를 전송할 땐 문자단위로 전송된다.
			
			==> 파일은 문자가 아니다, 바이너리 코드이다.
				고로 문자단위로 전송하면 문제가된다.
				 ==> 파일은 String으로 변경해서 전송해주어야 한다.
				 
			기계어 문서는 반드시 byte단위의 입출력을 사용해야 한다.
			왜 ??
				2byte가 1char가 될 때 바이트의 순서가 뒤집어(섞여)진다.
				
				예 ]
					
					가		ㄱ 0011		ㅏ 0101 이라고 가정하면..
					가	--> 	00110101  ==> 이 될 것이라고 예상하지만...
								01010011 로 위치가 바뀌게 된다.
	1. FileWriter/ FileReader
		==> 파일에 직접 연결도니 타겟 스트림
			단위는 char단위가 된다.
			
		내부적으로 char단위로 처리한다는 것만 변경이 되었을 뿐
		사용자 입장에서는 byte단위로 처리하는 것과 별 차이가 없다.
		
	2. 관련된 필터 스트림
		
		1) BufferedReader/BufferedWriter
			==> 중간에 Buffer 기능을 추가해서 스트림에 성능 향상을 위한 보조적인 스트림이다.
			
			참고 ]
				핵심 함수 
					: char의 기본 함수는 문자열을 읽을 수 있는 함수가 없다.
					
					readLine() ==> 한줄 단위로 문자열을 그대로 읽어서
									사용 할 수 있는 함수
				
					참고 ]
						이 함수를 사용할 때 주의사항
							이 함수는 줄 단위로 한줄 씩 읽은 함수이다.
						 (줄 단위(\r\n)를 발견하면 그곳에서 읽느 것을 멈춘다.)
						 따라서 필요하면 줄바꿈기호를 강제로 읽어야 한다.
						 이 함수는 줄 바꿈기호를 삭제한다.
						 (\r\n 까지 읽은 후 이 줄바꿈 기호를 버린다.)
						 
		2) PrintWriter
			==> printStream 처럼
				필터 계열의 스트림이다.
				1. 버퍼의 기능을 가지고 있다.
				2. 직접 파일에 연결할 수 있따.(다른 장치도 연결 가능하다.)
				3. 사용자 편의성을 제공한다(자바의 데이터를 그래
				4. 다른 byte[]의 스트림과도 연결할 수 있다.
	참고 ]
		스트림을 연결할 때 주의사항
			
			1. 반드시 같은 방향끼리만 연결할 수 있다.
			2. 반드시 같은 크기끼리만 연결할 수 있다. ( char와 byte를 구분해달라는 말)
			
			예 ]
				FileInputStreami  fin = new FileInputStream("###");
				BufferedReader br = new BufferedReader(fin);
					라고 하면 안된다.
				왜??
					두 스트림의 크기가 다르니까....
			
		참고 스트림
			InputStreamReader/ OutputStreamWriter 
			크기가 다른 두개의 스트림을 연결할 때 사용하는 보조 스트림이다.
			
			예 ]
				FileInputStream fin = new FileInputStream("###); // byte단위
					//이런 경우를 위해 만들어놓은 스트림 :
					InputStreamReader tmp = new InputStreamReader(fin);
				BufferedReader br = new BufferedReader(tmp);		// 문자 단위
		
		참고 ]
			타겟이 char이고 보조가 byte이면 연결되지 않습니다.
			
			반.드.시 타겟이 byte이고 보조가 char인 경우에만 연결할 수 있다..
---------------------------------------------------------------------------------------------
객체의 직렬화
	==> 데이터는 자바의 기본형 이외에도 클래스 전체를 데이터로
		상대방(외부장치)과 입출력 할 수 있다.
		 이 때 함수는 제외가 된다.
		그 클래스 안에 있는 변수의 내용만 입출력이 된다.
		
		이처럼 클래스가 다른 장치에 전달 되는 상태를
			"직렬화"
		라고 표현한다.
	
	참고 ]
		직렬화 라고 부르는 이유는
			클래스에 있는 변수의 내용이 순서대로 입출력 된다.
			라는 의미에서 직렬화라고 부른다.
	***
	주의 ]
		아무 클래스나 입출력 되는 것은 아니고 그 클래스가
		반드시 직렬화 가능한 클래스여야만 한다.
		
		직렬화 가능한 클래스란 ??
			==> Serializable 를 상속받은 클래스를 직렬화 클래스라고 한다.
	
	문제점 ]
		직렬화는 변수의 내용만 입출력되므로
		네트워크 같이 서로 떨어진 경우에는
		양쪽에 같은 클래스가 존재해야 한다.
		(왜냐하면 클래스 구조는 전달되지 않고 변수내용만 
			전달 되기 때문에 양쪽 모두 클래스의 구조는 가지고 있어야 한다.)
		
		이 때 양쪽에 있는 클래스는
			 클래스이름 + 패키지이름
		이 모두 동일해야 한다.
		
	이 때 사용하는 보조 스트림이 있는데
	 	ObjectInputStream/ObjectOutputStream
  	==> 주로 네트워크에서 많이 사용한다.
  		따라서 Reader/Writer 처럼 문자 단위의 스트림은 없다.
-----------------------------------------------------------------------------------------------------------------------
IO쪽에서 공부해야 될 내용
	****
	1. 필요한 데이터를 파일에 저장할 수 있다.
	2. 파일에 저장된 내용을 불러올 수 있다. 
----------------------------------------------------------------------------------------------------------------------